{"noir_version":"1.0.0-beta.3+ceaa1986628197bd1170147f6a07f0f98d21030a","hash":11939874382225891034,"abi":{"parameters":[{"name":"signature","type":{"kind":"array","length":64,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"txid_hash_bytes","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"chave_hash_bytes","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"amount_bytes","type":{"kind":"array","length":8,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"intent_id_bytes","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"signing_sender_x","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"public"},{"name":"signing_sender_y","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"public"},{"name":"payload_hash","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"public"}],"return_type":null,"error_types":{}},"bytecode":"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","debug_symbols":"5Z3RappBEIXfxetc7OzM7MzmVUopJjFFEA3GFErIu/ePaJuSmMJS9MC5i7rzcw4uXz6i++d5dre4efr+bbm+3zzOrr88z1ab2/luuVlPj55ntdn+yceH+fr18eNuvt3NrkW9X80W67vXH1Nermb3y9Vidh3l5erdYs2ww2Lt1X8vrh8tlq5xvHL38nux9JevV1Mcx4rTsOIEVpzEitOh4kTBiiNYcSpWHMWKg0XlwKJyYFE5sKgcWFQOLConFpUTi8qJReXEonJiUTmxqJxYVE4sKicWlROLyh2Lyh2Lyh2Lyh2Lyh2Lyh2Lyh2Lyh2Lyh2Lyh2KylqgqKwFispaoKisBYrKWqCorAWKylqgqKwFispaoKisBYvKgkVlwaKyYFFZsKgsWFQWLCoLFpUFi8qCRWXBonLFonLFonLFonLFonLFonLFonLFonLFonLFonLForJiUVmxqKxYVFYsKisWlRWLyopFZcWismJRWbGobFhUNiwqGxaVDYvKhkVlOzOVpw/Q/LB4+rRI38U5M5WnzXq88vTO+Ns47xe7aTksdrP2Z3F+sDi6HK8c01vwdvG+aLAUTZainaSoF5aiwlK0shRVlqLGUtRZirKYkbOYkbOYkbOYUWMxo8ZiRo3FjBqLGZ37vPjlirKYUWMxo8ZiRo3FjBqLGQWLGQWLGQWLGQWLGZ37ng2XK8piRsFiRsFiRsFiRsFiRsliRsliRsliRsliRue+b8rlirKY0al7vfRjdjH9q+h+KEaGcmSoDwydugfJ50MyMlRHhnRkyEaGfGRoZEf0kR3RR3ZEH9gRVsrIkIwM1ZEhHRmykSEfGWojQzEylCNDIztCRnaEjOwIGdkRMrIjZGRHyMiOkJEdISM74sRZ1RbtOBRF/+Mv4s+/JWwnzqpeKs6Js6oXiyNYcSpWHMWKY1hxHCtOw4oTWHGwqFyxqKxYVFYsKisWlRWLyopFZcWismJRWbGorFhUViwqGxaVDYvKhkVlw6KyYVHZsKhsWFQ2LCobFpUNi8qORWXHorJjUdmxqOxnpvLnR/bNz0zlS31maN5YigZL0WQp2kmKtsJSVFiKVpaiylLUWIqymFFjMaPGYkaNxYwaixkFixkFixkFixkFixkFixkFixkFixkFixkFixkFixklixklixklixklixklixklixklixklixklixklixl1FjPqLGbUWcyos5hRZzGjE6e6I+VYNEv8x6L/+BbWifPiF4sTWHESK05HiuMnzuVfLI5gxalYcRQrjmHFgaKyFygqe4GishcoKnvBorJgUVmwqCxYVBYsKgsWlQWLyoJFZcGismBRWbCoXLGoXLGoXLGoXLGoXLGoXLGoXLGoXLGoXLGoXLGorFhU1jNT+fMjka5npvKl/ibrqixFjaWosxRtLEWDpWiyFO0kRa2wFBWWoixmZCxmZCxmZCxmZCxmZCxmZCxmZCxm5Cxm5Cxm5Cxm5Cxm5Cxm5Cxm5Cxm5Cxm5Cxm5Cxm1FjMqLGYUWMxo8ZiRo3FjBqLGTUWM2osZtRYzKixmFGwmFGwmNGJO8Bly2PR3svbovuhDy2jlqKHoVrk7/9HOT242S5Xq+X3b6vN7Xy33Kwfp9Hp6R/z7XJ+s1ocHt4/rW/fvLr7+XB85Tj/sN3cLu6etovXK+1fmy7/Cw==","file_map":{"18":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"19":{"source":"use crate::runtime::is_unconstrained;\n\nglobal BLOCK_SIZE_IN_BYTES: u32 = 136; //(1600 - BITS * 2) / WORD_SIZE;\nglobal WORD_SIZE: u32 = 8; // Limbs are made up of u64s so 8 bytes each.\nglobal LIMBS_PER_BLOCK: u32 = BLOCK_SIZE_IN_BYTES / WORD_SIZE;\nglobal NUM_KECCAK_LANES: u32 = 25;\n\n#[foreign(keccakf1600)]\npub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {}\n\n#[no_predicates]\n#[deprecated(\"keccak256 is being deprecated from the stdlib, use https://github.com/noir-lang/keccak256 instead\")]\npub(crate) fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32] {\n    assert(N >= message_size);\n\n    // Copy input to block bytes. For that we'll need at least input bytes (N)\n    // but we want it to be padded to a multiple of BLOCK_SIZE_IN_BYTES.\n    let mut block_bytes = [0; ((N / BLOCK_SIZE_IN_BYTES) + 1) * BLOCK_SIZE_IN_BYTES];\n    if is_unconstrained() {\n        for i in 0..message_size {\n            block_bytes[i] = input[i];\n        }\n    } else {\n        for i in 0..N {\n            if i < message_size {\n                block_bytes[i] = input[i];\n            }\n        }\n    }\n\n    //1. format_input_lanes\n    let max_blocks = (N + BLOCK_SIZE_IN_BYTES) / BLOCK_SIZE_IN_BYTES;\n    //maximum number of bytes to hash\n    let real_max_blocks = (message_size + BLOCK_SIZE_IN_BYTES) / BLOCK_SIZE_IN_BYTES;\n    let real_blocks_bytes = real_max_blocks * BLOCK_SIZE_IN_BYTES;\n\n    block_bytes[message_size] = 1;\n    block_bytes[real_blocks_bytes - 1] = 0x80;\n\n    // populate a vector of 64-bit limbs from our byte array\n    let mut sliced_buffer =\n        [0; (((N / BLOCK_SIZE_IN_BYTES) + 1) * BLOCK_SIZE_IN_BYTES) / WORD_SIZE];\n    for i in 0..sliced_buffer.len() {\n        let limb_start = WORD_SIZE * i;\n\n        let mut sliced = 0;\n        let mut v = 1;\n        for k in 0..WORD_SIZE {\n            sliced += v * (block_bytes[limb_start + k] as Field);\n            v *= 256;\n        }\n\n        sliced_buffer[i] = sliced as u64;\n    }\n\n    //2. sponge_absorb\n    let mut state: [u64; NUM_KECCAK_LANES] = [0; NUM_KECCAK_LANES];\n    // When in an unconstrained runtime we can take advantage of runtime loop bounds,\n    // thus allowing us to simplify the loop body.\n    if is_unconstrained() {\n        for i in 0..real_max_blocks {\n            if (i == 0) {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = sliced_buffer[j];\n                }\n            } else {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = state[j] ^ sliced_buffer[i * LIMBS_PER_BLOCK + j];\n                }\n            }\n            state = keccakf1600(state);\n        }\n    } else {\n        // `real_max_blocks` is guaranteed to at least be `1`\n        // We peel out the first block as to avoid a conditional inside of the loop.\n        // Otherwise, a dynamic predicate can cause a blowup in a constrained runtime.\n        for j in 0..LIMBS_PER_BLOCK {\n            state[j] = sliced_buffer[j];\n        }\n        state = keccakf1600(state);\n        for i in 1..max_blocks {\n            if i < real_max_blocks {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = state[j] ^ sliced_buffer[i * LIMBS_PER_BLOCK + j];\n                }\n                state = keccakf1600(state);\n            }\n        }\n    }\n\n    //3. sponge_squeeze\n    let mut result = [0; 32];\n    for i in 0..4 {\n        let lane = state[i] as Field;\n        let lane_le: [u8; 8] = lane.to_le_bytes();\n        for j in 0..8 {\n            result[8 * i + j] = lane_le[j];\n        }\n    }\n    result\n}\n\nmod tests {\n    use super::keccak256;\n\n    #[test]\n    fn smoke_test() {\n        let input = [0xbd];\n        let result = [\n            0x5a, 0x50, 0x2f, 0x9f, 0xca, 0x46, 0x7b, 0x26, 0x6d, 0x5b, 0x78, 0x33, 0x65, 0x19,\n            0x37, 0xe8, 0x05, 0x27, 0x0c, 0xa3, 0xf3, 0xaf, 0x1c, 0x0d, 0xd2, 0x46, 0x2d, 0xca,\n            0x4b, 0x3b, 0x1a, 0xbf,\n        ];\n        assert_eq(keccak256(input, input.len()), result);\n    }\n\n    #[test]\n    fn hash_hello_world() {\n        let input = \"Hello world!\".as_bytes();\n        let result = [\n            0xec, 0xd0, 0xe1, 0x8, 0xa9, 0x8e, 0x19, 0x2a, 0xf1, 0xd2, 0xc2, 0x50, 0x55, 0xf4, 0xe3,\n            0xbe, 0xd7, 0x84, 0xb5, 0xc8, 0x77, 0x20, 0x4e, 0x73, 0x21, 0x9a, 0x52, 0x3, 0x25, 0x1f,\n            0xea, 0xab,\n        ];\n        assert_eq(keccak256(input, input.len()), result);\n    }\n\n    #[test]\n    fn var_size_hash() {\n        let input = [\n            189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205,\n            206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222,\n            223,\n        ];\n        let result = [\n            226, 37, 115, 94, 94, 196, 72, 116, 194, 105, 79, 233, 65, 12, 30, 94, 181, 131, 170,\n            219, 171, 166, 236, 88, 143, 67, 255, 160, 248, 214, 39, 129,\n        ];\n        assert_eq(keccak256(input, 13), result);\n    }\n\n    #[test]\n    fn hash_longer_than_136_bytes() {\n        let input = \"123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789\"\n            .as_bytes();\n        assert(input.len() > 136);\n\n        let result = [\n            0x1d, 0xca, 0xeb, 0xdf, 0xd9, 0xd6, 0x24, 0x67, 0x1c, 0x18, 0x16, 0xda, 0xd, 0x8a, 0xeb,\n            0xa8, 0x75, 0x71, 0x2c, 0xc, 0x89, 0xe0, 0x25, 0x2, 0xe8, 0xb6, 0x5e, 0x16, 0x5, 0x55,\n            0xe4, 0x40,\n        ];\n        assert_eq(keccak256(input, input.len()), result);\n    }\n}\n","path":"std/hash/keccak.nr"},"20":{"source":"pub mod poseidon;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\nuse crate::uint128::U128;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0]\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    // Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n","path":"std/hash/mod.nr"},"70":{"source":"use std::ecdsa_secp256k1::verify_signature;\nuse std::hash::keccak256;\n\nfn main(\n    // PRIVATE INPUTS\n    signature: [u8; 64], // r (32 bytes) || s (32 bytes)\n    txid_hash_bytes: [u8; 32], //CHANGE TO txid_hash_bytes\n    chave_hash_bytes: [u8; 32], //CHANGE TO chave_hash_bytes\n    amount_bytes: [u8; 8],\n    intent_id_bytes: [u8; 32],\n    // PUBLIC INPUTS\n    signing_sender_x: pub [u8; 32], // Ethereum-style address (last 20 bytes used for EVM compatibility)\n    signing_sender_y: pub [u8; 32], // Ethereum-style address (last 20 bytes used for EVM compatibility)\n    payload_hash: pub [u8; 32],\n) {\n    // ===================================================\n    // Recreate the payload the user signed\n    // (txid || chave || amount)\n    // ===================================================\n    // MAKE THE INTENT HASH (INTENTID + CHAVE + AMOUNT)\n    let mut intent_bytes: [u8; 72] = [0; 72];\n    let mut payload: [u8; 72] = [0; 72];\n    for i in 0..32 {\n        intent_bytes[i] = intent_id_bytes[i];\n    }\n    for i in 0..32 {\n        payload[i] = txid_hash_bytes[i];\n    }\n    for i in 0..32 {\n        payload[32 + i] = chave_hash_bytes[i];\n        intent_bytes[32 + i] = chave_hash_bytes[i];\n    }\n    for i in 0..8 {\n        payload[64 + i] = amount_bytes[i];\n        intent_bytes[64 + i] = amount_bytes[i];\n    }\n\n    let computed_payload_hash = keccak256(payload, 72);\n    assert(computed_payload_hash == payload_hash);\n\n    // ===================================================\n    // Verify the signature: the intent was signed by signing_sender (using parts x and y)\n    // ===================================================\n    let intent_hash: [u8; 32] = keccak256(intent_bytes, 72); //The hash of the actual intent data\n    let intent_second_hash: [u8; 32] = keccak256(intent_hash, 32); //The hash for validating the signature\n    let is_valid = verify_signature(\n        signing_sender_x,\n        signing_sender_y,\n        signature,\n        intent_second_hash,\n    );\n    assert(is_valid);\n}\n","path":"/home/michael/Documents/ZkPix-Backend/circuits/inbound/src/main.nr"}},"names":["main"],"brillig_names":["directive_integer_quotient","directive_invert","directive_to_radix"]}